plot(m2, which = 1, add.smooth = F,
ask = F, pch = 16, sub.caption="", caption="")
abline(a = 0, b = 0, col = "darkgrey", lwd = 2)
plot(m2, which = 4, ask = F, caption = "", sub.caption = "",
col.in = "blue", col.ex = "darkgrey", lwd = 3)
#diagnostics(m2, type = "model", col = "blue", pch = 16, cex = 1.5)
round(confint(c1), 4)
par(mfrow = c(2,2))
plot(c1, subset = c(1:4),
col.lab = "darkgrey", col.axis = "darkgrey", col = "darkgrey", ask = F)
par(mfrow = c(2,2))
plot(c1, subset = c(5:8),
col.lab = "darkgrey", col.axis = "darkgrey", col = "darkgrey", ask = F)
par(mfrow = c(2,2))
plot(c1, subset = c(9:12),
col.lab = "darkgrey", col.axis = "darkgrey", col = "darkgrey", ask = F)
par(mfrow = c(2,2))
plot(c1, subset = c(13:15),
col.lab = "darkgrey", col.axis = "darkgrey", col = "darkgrey", ask = F)
pandoc.table(m2$namesx[m2$probne0 > .5])
install.packages("pander")
# m1= lm(audience_score~., data = movies2)
# summary(m1)
#
# result = data.frame(fitted_values = fitted.values(m1),
#                     residuals = residuals(m1))
#
# library(ggplot2)
# ggplot(data = result, aes(x = fitted_values, y = residuals)) +
#   geom_point(pch = 1, size = 2) +
#   geom_abline(intercept = 0, slope = 0) +
#   xlab(expression(paste("fitted value ", widehat(audience_score)))) +
#   ylab("residuals")
#
# new_k = qnorm(0.5 + 0.5 * 0.95 ^ (1 / 651))
# new_k
#
# outliers = Bayes.outlier(m1, k=3.94)
# p1=outliers$prob.outlier
# a1=which.max(p1)
# p1[a1]
# Import libary
library(BAS)
# Use `bas.lm` for regression
m2= bas.lm(audience_score~.,
data = movies2,
initprobs = "eplogp",
prior = "BIC",
modelprior = uniform())
round(summary(m2), 3)
print(m2)
image(m2, rotate = F)
c1=coef(m2,estimator = "BMA")
print(c1)
plot(m2, which = 1, add.smooth = F,
ask = F, pch = 16, sub.caption="", caption="")
abline(a = 0, b = 0, col = "darkgrey", lwd = 2)
plot(m2, which = 4, ask = F, caption = "", sub.caption = "",
col.in = "blue", col.ex = "darkgrey", lwd = 3)
#diagnostics(m2, type = "model", col = "blue", pch = 16, cex = 1.5)
round(confint(c1), 4)
par(mfrow = c(2,2))
plot(c1, subset = c(1:4),
col.lab = "darkgrey", col.axis = "darkgrey", col = "darkgrey", ask = F)
par(mfrow = c(2,2))
plot(c1, subset = c(5:8),
col.lab = "darkgrey", col.axis = "darkgrey", col = "darkgrey", ask = F)
par(mfrow = c(2,2))
plot(c1, subset = c(9:12),
col.lab = "darkgrey", col.axis = "darkgrey", col = "darkgrey", ask = F)
par(mfrow = c(2,2))
plot(c1, subset = c(13:15),
col.lab = "darkgrey", col.axis = "darkgrey", col = "darkgrey", ask = F)
library(pander)
pandoc.table(m2$namesx[m2$probne0 > .5])
#
# m3= bas.lm(audience_score~.-imdb_rating-critics_score-thtr_rel_year,
#                  data = movies2, prior = "BIC",
#                  modelprior = uniform())
#
#
# round(summary(m3), 3)
# print(m3)
# image(m3, rotate = F)
# coef(m3)
#
# # Re-run regression using larger number of MCMC iterations
# m4= bas.lm(audience_score~ ., data = movies2,
#                   prior = "ZS-null", modelprior = uniform(),
#                   method = "MCMC", MCMC.iterations = 10 ^ 6)
#
# # Plot diagnostics again
# diagnostics(m4, type = "model", col = "blue", pch = 16, cex = 1.5)
# image(m4, rotate = F)
# coef.m4=coef(m4)
#
# par(mfrow = c(2,2))
# plot(coef.m4, subset = c(1:4),
#      col.lab = "darkgrey", col.axis = "darkgrey", col = "darkgrey", ask = F)
#
# par(mfrow = c(2,2))
# plot(coef.m4, subset = c(5:8),
#      col.lab = "darkgrey", col.axis = "darkgrey", col = "darkgrey", ask = F)
#
# round(confint(coef.m4), 4)
rm(list=ls())
library(dplyr)
library(gbm)
library(ggplot2)
load("movies.Rdata")
library(e1071)
attach(movies)
names(movies)
getwd()
mutate(movies,  feature_film= ifelse(title_type=="Feature Film", "Yes", "No"))
mutate(movies,  drama= ifelse(genre=="Drama", "Yes", "No"))
mutate(movies,  R_rated= ifelse(mpaa_rating=="R", "Yes", "No"))
mutate(movies,  oscar_season= ifelse(dvd_rel_month>9, "Yes", "No"))
mutate(movies,  summer_season= ifelse(dvd_rel_month>4&dvd_rel_month<9, "Yes", "No"))
movies2=select(movies,c(runtime,drama,feature_film,R_rated,oscar_season,
summer_season,imdb_rating,imdb_num_votes,critics_score,
best_pic_nom,best_pic_win,best_actor_win,best_actress_win,
best_dir_win,top200_box,audience_score))
names(mmovies)
names(movies)
rm(list=ls())
library(dplyr)
library(gbm)
library(ggplot2)
load("movies.Rdata")
library(e1071)
attach(movies)
names(movies)
getwd()
movies=mutate(movies,  feature_film= ifelse(title_type=="Feature Film", "Yes", "No"))
movies=mutate(movies,  drama= ifelse(genre=="Drama", "Yes", "No"))
movies=mutate(movies,  R_rated= ifelse(mpaa_rating=="R", "Yes", "No"))
movies=mutate(movies,  oscar_season= ifelse(dvd_rel_month>9, "Yes", "No"))
movies=mutate(movies,  summer_season= ifelse(dvd_rel_month>4&dvd_rel_month<9, "Yes", "No"))
table(genre)
movies2=select(movies,c(runtime,drama,feature_film,R_rated,oscar_season,
summer_season,imdb_rating,imdb_num_votes,critics_score,
best_pic_nom,best_pic_win,best_actor_win,best_actress_win,
best_dir_win,top200_box,audience_score))
str(movies2)
rm(movies)
str(movies2)
rowSums((apply(movies2,1,is.na)))
cbind(rowSums((apply(movies2,1,is.na))))
fac_var <- names(movies2)[which(sapply(movies2, is.factor))]
numeric_var <- names(movies2)[which(sapply(movies2, is.numeric))]
s1=apply(movies2[,numeric_var],2,log)
movies3=data.frame(s1,movies2[,fac_var])
summary(movies2[,numeric_var])
movies2[numeric_var]=(apply(movies2[,fac_var], 2,table))
plotHist <- function(data_in, i) {
data <- data.frame(x=data_in[[i]])
p <- ggplot(data=data, aes(x=factor(x))) + stat_count() + xlab(colnames(data_in)[i]) + theme_light() +
theme(axis.text.x = element_text(angle = 90, hjust =1))
return (p)
}
doPlots <- function(data_in, fun, ii, ncol=3) {
pp <- list()
for (i in ii) {
p <- fun(data_in=data_in, i=i)
pp <- c(pp, list(p))
}
do.call("grid.arrange", c(pp, ncol=ncol))
}
doPlots(movies2[,fac_var], fun = plotHist, ii = 1:6, ncol = 2)
doPlots(movies2[,fac_var], fun = plotHist, ii = 7:11, ncol = 2)
plotDen <- function(data_in, i){
data <- data.frame(x=data_in[[i]], audience_score = movies2$audience_score)
p <- ggplot(data= data) + geom_line(aes(x = x), stat = 'density', size = 1,alpha = 1.0) +
xlab(paste0((colnames(data_in)[i]), '\n', 'Skewness: ',round(skewness(data_in[[i]], na.rm = TRUE), 2))) + theme_light()
return(p)
}
install.packages("pander")
install.packages("pander")
new_movie = data.frame(audience_score = 90, feature_film = "yes", drama = "no", runtime=108, mpaa_rating_R = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 8.0, imdb_num_votes = 871307,critics_score=85, best_pic_nom = "yes", best_pic_win = "yes", best_actor_win = "yes", best_actress_win = "no", best_dir_win = "no", top200_box = "yes")
prediction <- predict(m2, new_movie, estimator = "BMA", se.fit=TRUE)
m2= bas.lm(audience_score~.,
data = movies2,
initprobs = "eplogp",
prior = "BIC",
modelprior = uniform())
new_movie = data.frame(audience_score = 90, feature_film = "yes", drama = "no", runtime=108, mpaa_rating_R = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 8.0, imdb_num_votes = 871307,critics_score=85, best_pic_nom = "yes", best_pic_win = "yes", best_actor_win = "yes", best_actress_win = "no", best_dir_win = "no", top200_box = "yes")
prediction <- predict(m2, new_movie, estimator = "BMA", se.fit=TRUE)
m2= bas.lm(audience_score~.,
data = movies2,
initprobs = "eplogp",
prior = "BIC",
modelprior = uniform())
new_movie = data.frame(audience_score = 90, feature_film = "yes", drama = "no", runtime=108, R_rated = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 8.0, imdb_num_votes = 871307,critics_score=85, best_pic_nom = "yes", best_pic_win = "yes", best_actor_win = "yes", best_actress_win = "no", best_dir_win = "no", top200_box = "yes")
prediction <- predict(m2, new_movie, estimator = "BMA", se.fit=TRUE)
feature_film= ifelse(title_type=="Feature Film",1,0)
drama= ifelse(genre=="Drama", 1, 0)
R_rated= ifelse(mpaa_rating=="R", 1, 0)
oscar_season= ifelse(dvd_rel_month>9,1,0)
summer_season= ifelse(dvd_rel_month>4&dvd_rel_month<9,1,0)
movies$feature_film=factor(feature_film,c(1,0),c("yes","no"))
load("movies.Rdata")
attach(movies)
feature_film= ifelse(title_type=="Feature Film",1,0)
drama= ifelse(genre=="Drama", 1, 0)
R_rated= ifelse(mpaa_rating=="R", 1, 0)
oscar_season= ifelse(dvd_rel_month>9,1,0)
summer_season= ifelse(dvd_rel_month>4&dvd_rel_month<9,1,0)
movies$feature_film=factor(feature_film,c(1,0),c("yes","no"))
movies$drama=factor(drama,c(1,0),c("yes","no"))
movies$R_rated=factor(R_rated,c(1,0),c("yes","no"))
movies$oscar_season=factor(oscar_season,c(1,0),c("yes","no"))
movies$summer_season=factor(summer_season,c(1,0),c("yes","no"))
movies2=select(movies,c(runtime,thtr_rel_year,drama,feature_film,R_rated,oscar_season,
summer_season,imdb_rating,imdb_num_votes,critics_score,
best_pic_nom,best_pic_win,best_actor_win,best_actress_win,
best_dir_win,top200_box,audience_score))
rm(drama,feature_film,oscar_season ,R_rated,summer_season)
rm(movies)
fac_var <- names(movies2)[which(sapply(movies2, is.factor))]
numeric_var <- names(movies2)[which(sapply(movies2, is.numeric))]
m2= bas.lm(audience_score~.,
data = movies2,
initprobs = "eplogp",
prior = "BIC",
modelprior = uniform())
new_movie = data.frame(audience_score = 90, feature_film = "yes", drama = "no", runtime=108, R_rated = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 8.0, imdb_num_votes = 871307,critics_score=85, best_pic_nom = "yes", best_pic_win = "yes", best_actor_win = "yes", best_actress_win = "no", best_dir_win = "no", top200_box = "yes")
prediction <- predict(m2, new_movie, estimator = "BMA", se.fit=TRUE)
ci_audience <- confint(prediction, parm="pred")
RMSE <- sum_table[[2,3]]
m2= bas.lm(audience_score~.,
data = movies2,
initprobs = "eplogp",
prior = "BIC",
modelprior = uniform())
new_movie = data.frame(audience_score = 90, feature_film = "yes", drama = "no", runtime=108, R_rated = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 8.0, imdb_num_votes = 871307,critics_score=85, best_pic_nom = "yes", best_pic_win = "yes", best_actor_win = "yes", best_actress_win = "no", best_dir_win = "no", top200_box = "yes")
prediction <- predict(m2, new_movie, estimator = "BMA", se.fit=TRUE)
ci_audience <- confint(prediction, parm="pred")
# RMSE <- sum_table[[2,3]]
# row1<- data.frame(type="95% cred.", lwr = ci_audience[1], pred = ci_audience[3], upr = ci_audience[2])
# row2 <- data.frame(type ="RMSE", lwr = ci_audience[3] - RMSE, pred = ci_audience[3], upr = ci_audience[3] + RMSE)
# pandoc.table(rbind(row1,row2))
m2= bas.lm(audience_score~.,
data = movies2,
initprobs = "eplogp",
prior = "BIC",
modelprior = uniform())
new_movie = data.frame(audience_score = 90, feature_film = "yes", drama = "no", runtime=108, R_rated = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 8.0, imdb_num_votes = 871307,critics_score=85, best_pic_nom = "no", best_pic_win = "yes", best_actor_win = "yes", best_actress_win = "no", best_dir_win = "no", top200_box = "yes")
prediction <- predict(m2, new_movie, estimator = "BMA")
ci_audience <- confint(prediction, parm="pred")
# RMSE <- sum_table[[2,3]]
# row1<- data.frame(type="95% cred.", lwr = ci_audience[1], pred = ci_audience[3], upr = ci_audience[2])
# row2 <- data.frame(type ="RMSE", lwr = ci_audience[3] - RMSE, pred = ci_audience[3], upr = ci_audience[3] + RMSE)
# pandoc.table(rbind(row1,row2))
m2= bas.lm(audience_score~.,
data = movies2,
initprobs = "eplogp",
prior = "BIC",
modelprior = uniform())
new_movie = data.frame(audience_score = 90, feature_film = "yes", drama = "no", runtime=108, R_rated = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 8.0, imdb_num_votes = 871307,critics_score=85, best_pic_nom = "no", best_pic_win = "yes", best_actor_win = "yes", best_actress_win = "no", best_dir_win = "no", top200_box = "yes")
prediction <- predict(m2, new_movie, estimator = "BMA")
ci_audience <- confint(prediction, parm="pred")
# RMSE <- sum_table[[2,3]]
# row1<- data.frame(type="95% cred.", lwr = ci_audience[1], pred = ci_audience[3], upr = ci_audience[2])
# row2 <- data.frame(type ="RMSE", lwr = ci_audience[3] - RMSE, pred = ci_audience[3], upr = ci_audience[3] + RMSE)
# pandoc.table(rbind(row1,row2))
m2= bas.lm(audience_score~.,
data = movies2,
initprobs = "eplogp",
prior = "BIC",
modelprior = uniform())
new_movie = data.frame(audience_score = 90, feature_film = "yes", drama = "no", runtime=108, R_rated = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 8.0, imdb_num_votes = 871307,critics_score=85, best_pic_nom = "no", best_pic_win = "yes", best_actor_win = "yes", best_actress_win = "no", best_dir_win = "no", top200_box = "yes")
prediction <- predict(m2, new_movie)
ci_audience <- confint(prediction, parm="pred")
# RMSE <- sum_table[[2,3]]
# row1<- data.frame(type="95% cred.", lwr = ci_audience[1], pred = ci_audience[3], upr = ci_audience[2])
# row2 <- data.frame(type ="RMSE", lwr = ci_audience[3] - RMSE, pred = ci_audience[3], upr = ci_audience[3] + RMSE)
# pandoc.table(rbind(row1,row2))
m2= bas.lm(audience_score~.,
data = movies2,
initprobs = "eplogp",
prior = "BIC",
modelprior = uniform())
new_movie = data.frame(audience_score = 90, feature_film = "yes", drama = "no", runtime=108, R_rated = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 8.0, imdb_num_votes = 871307,critics_score=85, best_pic_nom = "no", best_pic_win = "yes", best_actor_win = "yes", best_actress_win = "no", best_dir_win = "no", top200_box = "yes")
prediction <- predict(m2, new_movie)
ci_audience <- confint(prediction, parm="pred")
# RMSE <- sum_table[[2,3]]
# row1<- data.frame(type="95% cred.", lwr = ci_audience[1], pred = ci_audience[3], upr = ci_audience[2])
# row2 <- data.frame(type ="RMSE", lwr = ci_audience[3] - RMSE, pred = ci_audience[3], upr = ci_audience[3] + RMSE)
# pandoc.table(rbind(row1,row2))
library(BAS)
m2= bas.lm(audience_score~.,
data = movies2,
initprobs = "eplogp",
prior = "BIC",
modelprior = uniform())
new_movie = data.frame(audience_score = 90, feature_film = "yes", drama = "no", runtime=108, R_rated = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 8.0, imdb_num_votes = 871307,critics_score=85, best_pic_nom = "no", best_pic_win = "yes", best_actor_win = "yes", best_actress_win = "no", best_dir_win = "no", top200_box = "yes")
prediction <- predict(m2, new_movie)
ci_audience <- confint(prediction, parm="pred")
# RMSE <- sum_table[[2,3]]
# row1<- data.frame(type="95% cred.", lwr = ci_audience[1], pred = ci_audience[3], upr = ci_audience[2])
# row2 <- data.frame(type ="RMSE", lwr = ci_audience[3] - RMSE, pred = ci_audience[3], upr = ci_audience[3] + RMSE)
# pandoc.table(rbind(row1,row2))
library(BAS)
m2= bas.lm(audience_score~.,
data = movies2,
initprobs = "eplogp",
prior = "BIC",
modelprior = uniform())
new_movie = data.frame(audience_score = 90, feature_film = "yes", drama = "no", runtime=108, R_rated = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 8.0, imdb_num_votes = 871307,critics_score=85, best_pic_nom = "no", best_pic_win = "yes", best_actor_win = "yes", best_actress_win = "no", best_dir_win = "no", top200_box = "yes")
prediction <- predict(m2, new_movie)
ci_audience <- confint(prediction, parm="pred")
prediction
ci_audience
# RMSE <- sum_table[[2,3]]
# row1<- data.frame(type="95% cred.", lwr = ci_audience[1], pred = ci_audience[3], upr = ci_audience[2])
# row2 <- data.frame(type ="RMSE", lwr = ci_audience[3] - RMSE, pred = ci_audience[3], upr = ci_audience[3] + RMSE)
# pandoc.table(rbind(row1,row2))
# drama= ifelse(genre=="Drama", 1, 0)
# R_rated= ifelse(mpaa_rating=="R", 1, 0)
# oscar_season= ifelse(dvd_rel_month>9,1,0)
# summer_season= ifelse(dvd_rel_month>4&dvd_rel_month<9,1,0)
#
# movies$feature_film=factor(feature_film,c(1,0),c("yes","n0"))
# movies$drama=factor(drama,c(1,0),c("yes","n0"))
# movies$R_rated=factor(R_rated,c(1,0),c("yes","no"))
# movies$oscar_season=factor(oscar_season,c(1,0),c("yes","n0"))
# movies$summer_season=factor(summer_season,c(1,0),c("yes","n0"))
install.packages("GGally")
library(GGally)
library(ggplot2)
library(dplyr)
library(statsr)
library(BAS)
library(gbm)
library(e1071)
library(GGally)
library(gridExtra)
library(BAS)
m2= bas.lm(audience_score~.,
data = movies2,
initprobs = "eplogp",
prior = "BIC",
modelprior = uniform())
new_movie = data.frame(audience_score = 90, feature_film = "yes", drama = "no", runtime=108, R_rated = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 8.0, imdb_num_votes = 871307,critics_score=85, best_pic_nom = "no", best_pic_win = "yes", best_actor_win = "yes", best_actress_win = "no", best_dir_win = "no", top200_box = "yes")
prediction <- predict(m2, new_movie)
ci_audience <- confint(prediction, parm="pred")
RMSE <- sum_table[[2,3]]
library(BAS)
m2= bas.lm(audience_score~.,
data = movies2,
initprobs = "eplogp",
prior = "BIC",
modelprior = uniform())
new_movie = data.frame(audience_score = 90, feature_film = "yes", drama = "no", runtime=108, R_rated = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 8.0, imdb_num_votes = 871307,critics_score=85, best_pic_nom = "no", best_pic_win = "yes", best_actor_win = "yes", best_actress_win = "no", best_dir_win = "no", top200_box = "yes")
prediction <- predict(m2, new_movie)
ci_audience <- confint(prediction, parm="pred")
mean(prediction)
#RMSE <- sum_table[[2,3]]
# row1<- data.frame(type="95% cred.", lwr = ci_audience[1], pred = ci_audience[3], upr = ci_audience[2])
# row2 <- data.frame(type ="RMSE", lwr = ci_audience[3] - RMSE, pred = ci_audience[3], upr = ci_audience[3] + RMSE)
# pandoc.table(rbind(row1,row2))
library(BAS)
m2= bas.lm(audience_score~.,
data = movies2,
initprobs = "eplogp",
prior = "BIC",
modelprior = uniform())
new_movie = data.frame(audience_score = 90, feature_film = "yes", drama = "no", runtime=108, R_rated = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 8.0, imdb_num_votes = 871307,critics_score=85, best_pic_nom = "no", best_pic_win = "yes", best_actor_win = "yes", best_actress_win = "no", best_dir_win = "no", top200_box = "yes")
prediction <- predict(m2, new_movie)
ci_audience <- confint(prediction, parm="pred")
class(prediction)
#RMSE <- sum_table[[2,3]]
# row1<- data.frame(type="95% cred.", lwr = ci_audience[1], pred = ci_audience[3], upr = ci_audience[2])
# row2 <- data.frame(type ="RMSE", lwr = ci_audience[3] - RMSE, pred = ci_audience[3], upr = ci_audience[3] + RMSE)
# pandoc.table(rbind(row1,row2))
library(BAS)
m2= bas.lm(audience_score~.,
data = movies2,
initprobs = "eplogp",
prior = "BIC",
modelprior = uniform())
new_movie = data.frame(audience_score = 90, feature_film = "yes", drama = "no", runtime=108, R_rated = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 8.0, imdb_num_votes = 871307,critics_score=85, best_pic_nom = "no", best_pic_win = "yes", best_actor_win = "yes", best_actress_win = "no", best_dir_win = "no", top200_box = "yes")
prediction <- predict(m2, new_movie)
ci_audience <- confint(prediction, parm="pred")
mean(prediction$Ypred)
#RMSE <- sum_table[[2,3]]
# row1<- data.frame(type="95% cred.", lwr = ci_audience[1], pred = ci_audience[3], upr = ci_audience[2])
# row2 <- data.frame(type ="RMSE", lwr = ci_audience[3] - RMSE, pred = ci_audience[3], upr = ci_audience[3] + RMSE)
# pandoc.table(rbind(row1,row2))
library(ggplot2)
library(dplyr)
library(statsr)
library(BAS)
library(gbm)
library(e1071)
load("movies.Rdata")
attach(movies)
cbind(table(genre))
feature_film= ifelse(title_type=="Feature Film",1,0)
drama= ifelse(genre=="Drama", 1, 0)
R_rated= ifelse(mpaa_rating=="R", 1, 0)
oscar_season= ifelse(dvd_rel_month>9,1,0)
summer_season= ifelse(dvd_rel_month>4&dvd_rel_month<9,1,0)
movies$feature_film=factor(feature_film,c(1,0),c("yes","no"))
movies$drama=factor(drama,c(1,0),c("yes","no"))
movies$R_rated=factor(R_rated,c(1,0),c("yes","no"))
movies$oscar_season=factor(oscar_season,c(1,0),c("yes","no"))
movies$summer_season=factor(summer_season,c(1,0),c("yes","no"))
movies2=select(movies,c(runtime,thtr_rel_year,drama,feature_film,R_rated,oscar_season,
summer_season,imdb_rating,imdb_num_votes,critics_score,
best_pic_nom,best_pic_win,best_actor_win,best_actress_win,
best_dir_win,top200_box,audience_score))
rm(drama,feature_film,oscar_season ,R_rated,summer_season)
rm(movies)
fac_var <- names(movies2)[which(sapply(movies2, is.factor))]
numeric_var <- names(movies2)[which(sapply(movies2, is.numeric))]
str(movies2)
rowSums((apply(movies2,1,is.na)))
cbind(rowSums((apply(movies2,1,is.na))))
summary(movies2[,numeric_var])
(apply(movies2[,fac_var], 2,table))
plotHist <- function(data_in, i) {
data <- data.frame(x=data_in[[i]])
p <- ggplot(data=data, aes(x=factor(x))) + stat_count() + xlab(colnames(data_in)[i]) + theme_light() +
theme(axis.text.x = element_text(angle = 90, hjust =1))
return (p)
}
doPlots <- function(data_in, fun, ii, ncol=3) {
pp <- list()
for (i in ii) {
p <- fun(data_in=data_in, i=i)
pp <- c(pp, list(p))
}
do.call("grid.arrange", c(pp, ncol=ncol))
}
doPlots(movies2[,fac_var], fun = plotHist, ii = 1:6, ncol = 2)
doPlots(movies2[,fac_var], fun = plotHist, ii = 7:11, ncol = 2)
plotDen <- function(data_in, i){
data <- data.frame(x=data_in[[i]], audience_score = movies2$audience_score)
p <- ggplot(data= data) + geom_line(aes(x = x), stat = 'density', size = 1,alpha = 1.0) +
xlab(paste0((colnames(data_in)[i]), '\n', 'Skewness: ',round(skewness(data_in[[i]], na.rm = TRUE), 2))) + theme_light()
return(p)
}
doPlots(movies2[,numeric_var], fun = plotDen, ii = 1:6, ncol = 2)
plotHist <- function(data_in, i) {
data <- data.frame(x=data_in[[i]])
p <- ggplot(data=data, aes(x=factor(x))) + stat_count() + xlab(colnames(data_in)[i]) + theme_light() +
theme(axis.text.x = element_text(angle = 90, hjust =1))
return (p)
}
doPlots <- function(data_in, fun, ii, ncol=3) {
pp <- list()
for (i in ii) {
p <- fun(data_in=data_in, i=i)
pp <- c(pp, list(p))
}
do.call("grid.arrange", c(pp, ncol=ncol))
}
doPlots(movies2[,fac_var], fun = plotHist, ii = 1:6, ncol = 2)
doPlots(movies2[,fac_var], fun = plotHist, ii = 7:11, ncol = 2)
plotDen <- function(data_in, i){
data <- data.frame(x=data_in[[i]], audience_score = movies2$audience_score)
p <- ggplot(data= data) + geom_line(aes(x = x), stat = 'density', size = 1,alpha = 1.0) +
xlab(paste0((colnames(data_in)[i]), '\n', 'Skewness: ',round(skewness(data_in[[i]], na.rm = TRUE), 2))) + theme_light()
return(p)
}
doPlots(movies2[,numeric_var], fun = plotDen, ii = 1:6, ncol = 2)
qplot(drama,audience_score,color=feature_film, data=movies2,geom = c("boxplot"))
qplot(best_actor_win,audience_score,color=best_actress_win, data=movies2,geom = c("boxplot"))
qplot(best_dir_win,audience_score,color=best_pic_win, data=movies2,geom = c("boxplot"))
library(BAS)
m2= bas.lm(audience_score~.,
data = movies2,
initprobs = "eplogp",
prior = "BIC",
modelprior = uniform())
round(summary(m2), 3)
print(m2)
image(m2, rotate = F)
c1=coef(m2,estimator = "BMA")
print(c1)
plot(m2, which = 1, add.smooth = F,
ask = F, pch = 16, sub.caption="", caption="")
abline(a = 0, b = 0, col = "darkgrey", lwd = 2)
plot(m2, which = 4, ask = F, caption = "", sub.caption = "",
col.in = "blue", col.ex = "darkgrey", lwd = 3)
round(confint(c1), 4)
par(mfrow = c(2,2))
plot(c1, subset = c(1:4),
col.lab = "darkgrey", col.axis = "darkgrey", col = "darkgrey", ask = F)
par(mfrow = c(2,2))
plot(c1, subset = c(5:8),
col.lab = "darkgrey", col.axis = "darkgrey", col = "darkgrey", ask = F)
par(mfrow = c(2,2))
plot(c1, subset = c(9:12),
col.lab = "darkgrey", col.axis = "darkgrey", col = "darkgrey", ask = F)
par(mfrow = c(2,2))
plot(c1, subset = c(13:15),
col.lab = "darkgrey", col.axis = "darkgrey", col = "darkgrey", ask = F)
library(BAS)
m2= bas.lm(audience_score~.,
data = movies2,
initprobs = "eplogp",
prior = "BIC",
modelprior = uniform())
new_movie = data.frame(audience_score = 90, feature_film = "yes", drama = "no", runtime=108, R_rated = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 8.0, imdb_num_votes = 871307,critics_score=85, best_pic_nom = "no", best_pic_win = "yes", best_actor_win = "yes", best_actress_win = "no", best_dir_win = "no", top200_box = "yes")
prediction <- predict(m2, new_movie)
mean(prediction$Ypred)
summary(m2)
install.packages("KernSmooth")
library(KernSmooth)
